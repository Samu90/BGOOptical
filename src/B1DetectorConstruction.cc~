#include "B1DetectorConstruction.hh"

#include "G4RunManager.hh"
#include "G4NistManager.hh"
#include "G4Box.hh"
#include "G4Cons.hh"
#include "G4Orb.hh"
#include "G4Sphere.hh"
#include "G4Trd.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4SystemOfUnits.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1DetectorConstruction::B1DetectorConstruction()
: G4VUserDetectorConstruction(),
  fScoringVolume1(0),
  fScoringVolume2(0),
  fScoringVolume3(0),
  XDimCris(0),
  YDimCris(0),
  ZDimCris(0),
  semiDist(0)
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1DetectorConstruction::~B1DetectorConstruction()
{ }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4VPhysicalVolume* B1DetectorConstruction::Construct()
{  
  // Get nist material manager
  G4NistManager* nist = G4NistManager::Instance();
  

   
  // Option to switch on/off checking of volumes overlaps
  //
  G4bool checkOverlaps = true;

  //     
  // World
  //
  G4double world_sizeXY = 30*cm;
  G4double world_sizeZ  = 40*cm;

  //Dimensioni Scintillatori
  
  XDimCris= 0.5*cm;
  YDimCris= 2*cm;
  ZDimCris= 4.5*cm;

  //Semidistanza tra i due scintilatori
  
  semiDist=5.*cm;

  //Posizione scintillatori
  
  G4double XPosCris1=0*cm;
  G4double YPosCris1=0*cm;
  G4double ZPosCris1=ZDimCris+semiDist;
  
  G4double XPosCris2=0*cm;
  G4double YPosCris2=0*cm;
  G4double ZPosCris2=-ZDimCris-semiDist;

  //Il Cristallo del Cherenkov

  //altezza rispetto allo scintillatore superiore
  G4double altezza=2*cm; 
  
  G4double XDimCher=9*cm;
  G4double YDimCher=1.1*cm;
  G4double ZDimCher=1.1*cm;
  
  G4double XPosCher=0;
  G4double YPosCher=0;
  G4double ZPosCher=semiDist+2*ZDimCris+2*ZDimCher+ altezza;
  
//    Define BGO
    G4double density=0.;
    G4int ncomponents=0;
    G4int natoms=0;
    
    G4Element* O  = nist->FindOrBuildElement(8);
    G4Element* Bi = nist->FindOrBuildElement(83);
    G4Element* Ge = nist->FindOrBuildElement(32);
    
    G4Material* BGO =
    new G4Material("BGO", density= 7.10*g/cm3, ncomponents=3);
    BGO->AddElement(O , natoms=12);
    BGO->AddElement(Ge, natoms= 3);
    BGO->AddElement(Bi, natoms= 4);


    
  G4Material* world_mat = nist->FindOrBuildMaterial("G4_AIR");
  
  G4Box* solidWorld =    
    new G4Box("World",                       //its name
      world_sizeXY, world_sizeXY, world_sizeZ);     //its size
      
  G4LogicalVolume* logicWorld =
    new G4LogicalVolume(solidWorld,          //its solid
                        world_mat,           //its material
                        "World");            //its name
                                   
  G4VPhysicalVolume* physWorld = 
    new G4PVPlacement(0,                     //no rotation
                      G4ThreeVector(),       //at (0,0,0)
                      logicWorld,            //its logical volume
                      "World",               //its name
                      0,                     //its mother  volume
                      false,                 //no boolean operation
                      0,                     //copy number
                      checkOverlaps);        //overlaps checking
                     
  //
  //Materiale detector
  //
  G4Material* crist_mat = nist->FindOrBuildMaterial("G4_PLASTIC_SC_VINYLTOLUENE");
  
  
  //
  //  first cristal
  //
  
  G4Box* solidCrystUp = new G4Box("crystal1", XDimCris, YDimCris, ZDimCris);
  
  G4LogicalVolume* logicCrystUp =
    new G4LogicalVolume(solidCrystUp,          //its solid
                        crist_mat,           //its material
                        "CrystalLV");        //its name
  
  
  new G4PVPlacement(0,                     //no rotation
		    G4ThreeVector(XPosCris1,YPosCris1,ZPosCris1),
		    logicCrystUp,            //its logical volume
		    "CrystalLV",               //its name
		    logicWorld,                    //its mother  volume
		    false,                 //no boolean operation
		    0,                     //copy number
		    checkOverlaps);       // checking overlaps
  //
  // second cristal
  //
  
  
  G4Box* solidCrystD = new G4Box("crystal2", XDimCris, YDimCris, ZDimCris);
  
  G4LogicalVolume* logicCrystD =
    new G4LogicalVolume(solidCrystD,          //its solid
                        crist_mat,           //its material
                        "Crysta2LV");        //its name
  
  
  
  new G4PVPlacement(0,                     //no rotation
		    G4ThreeVector(XPosCris2,YPosCris2,ZPosCris2),
		    logicCrystD,            //its logical volume
		    "Crysta2LV",               //its name
		    logicWorld,                     //its mother  volume
		    false,                 //no boolean operation
		    0,                     //copy number
		    checkOverlaps);       // checking overlaps



  //SCintillatore Cherenkov



  G4Box* solidCristCher = new G4Box("CrisCher", XDimCher, YDimCher, ZDimCher);
  
  G4LogicalVolume* logicCristCher =
    new G4LogicalVolume(solidCristCher,          //its solid
                                BGO,            //its material
                        "CristCherLV");        //its name
  
  
  
  new G4PVPlacement(0,                     //no rotation
		    G4ThreeVector(XPosCher,YPosCher,ZPosCher),
		    logicCristCher,            //its logical volume
		    "Crysta2PV",               //its name
		    logicWorld,                     //its mother  volume
		    false,                 //no boolean operation
		    0,                     //copy number
		    checkOverlaps);       // checking overlaps
  
  
  
  // Set Crist1 as scoring volume
  //
  fScoringVolume1 = logicCrystUp;
  fScoringVolume2 = logicCrystD;
  fScoringVolume3= logicCristCher;
  //
  //always return the physical World
  //
  return physWorld;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
