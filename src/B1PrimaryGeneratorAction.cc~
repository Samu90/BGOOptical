#include "B1PrimaryGeneratorAction.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4LogicalVolume.hh"
#include "G4Box.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include "G4ParticleTable.hh"
#include "G4ParticleDefinition.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"
#include "B1DetectorConstruction.hh"
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4double pCos(){
    G4double thetaMax=3.14159;
    G4double a;
    G4double b;
    do{
        a=(G4float)G4UniformRand()*(thetaMax)-thetaMax/2;
        b=(G4float)G4UniformRand();
    }while(b>cos(a)*cos(a)*cos(a));
    
    
    return a;
    
}
B1PrimaryGeneratorAction::B1PrimaryGeneratorAction(B1DetectorConstruction* detector)
: G4VUserPrimaryGeneratorAction(),
  fParticleGun(0), 
  fDetector(detector)
{
  G4int n_particle = 1;
  fParticleGun  = new G4ParticleGun(n_particle);

  // default particle kinematic
  G4ParticleTable* particleTable = G4ParticleTable::GetParticleTable();
  G4String particleName;
  G4ParticleDefinition* particle
    = particleTable->FindParticle(particleName="mu+");
  fParticleGun->SetParticleDefinition(particle);

  fParticleGun->SetParticleEnergy(2.*GeV);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

B1PrimaryGeneratorAction::~B1PrimaryGeneratorAction()
{
  delete fParticleGun;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......






void B1PrimaryGeneratorAction::GeneratePrimaries(G4Event* anEvent)
{
    //    Direzione Momento casuale!!
    G4double theta=pCos();
    G4double phi=G4UniformRand()*2*3.141;
    G4double pz=cos(theta);
    G4double px=sin(theta)*cos(phi);
    G4double py=sin(theta)*sin(phi);
    G4double norm=1/(sqrt(pz*pz+px*px+py*py));

    G4double x0=(fDetector->GetXS())*2*(G4UniformRand()-0.5);
    G4double y0=(fDetector->GetYS())*2*(G4UniformRand()-0.5);
    G4double z0=(fDetector->GetHS());
    G4double radius=(fDetector->GetZS())*4+1*cm;
        
    fParticleGun->SetParticleMomentumDirection(G4ThreeVector(norm*px,norm*py,-norm*pz));
  
    fParticleGun->SetParticlePosition(G4ThreeVector(x0-radius*norm*px,y0-radius*norm*py,z0+radius*norm*pz));
    fParticleGun->GeneratePrimaryVertex(anEvent);
}



//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

